{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\nicke\\\\OneDrive\\\\Stuff\\\\Documents\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamForm.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nconst StreamForm = props => {\n  const renderError = ({\n    error,\n    touched\n  }) => {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this);\n    }\n  }; //   // taking values from formProps, automatically populated by reduxForm\n\n\n  renderInput = ({\n    input,\n    label,\n    meta\n  }) => {\n    // adds all the props of formProps as props of input element\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), renderError(meta)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  };\n\n  onSubmit = formValues => {\n    props.onSubmit(formValues);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: props.handleSubmit(onSubmit),\n    className: \"ui form error\",\n    children: [/*#__PURE__*/_jsxDEV(Field, {\n      name: \"title\",\n      component: renderInput,\n      label: \"Enter title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Field, {\n      name: \"description\",\n      component: renderInput,\n      label: \"Enter description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"ui button primary\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n\n  const validate = formValues => {\n    // looks for props within errors obj that has same name as the form props\n    const errors = {};\n\n    if (!formValues.title) {\n      errors.title = \"You must enter a title\";\n    }\n\n    if (!formValues.description) {\n      errors.description = \"You must enter a description\";\n    }\n\n    return errors;\n  };\n};\n\n_c = StreamForm;\nexport default reduxForm({\n  form: \"streamForm\",\n  validate\n})(StreamForm); // class StreamForm extends React.Component {\n//   renderError({ error, touched }) {\n//     if (touched && error) {\n//       return (\n//         <div className=\"ui error message\">\n//           <div className=\"header\">{error}</div>\n//         </div>\n//       );\n//     }\n//   }\n//   // taking values from formProps, automatically populated by reduxForm\n//   renderInput = ({ input, label, meta }) => {\n//     // adds all the props of formProps as props of input element\n//     const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n//     return (\n//       <div className={className}>\n//         <label>{label}</label>\n//         <input {...input} autoComplete=\"off\" />\n//         {this.renderError(meta)}\n//       </div>\n//     );\n//   };\n//   onSubmit = (formValues) => {\n//     this.props.onSubmit(formValues);\n//   }\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//         <Field name=\"title\" component={this.renderInput} label=\"Enter title\" />\n//         <Field\n//           name=\"description\"\n//           component={this.renderInput}\n//           label=\"Enter description\"\n//         />\n//         <button className=\"ui button primary\">Submit</button>\n//       </form>\n//     );\n//   }\n// }\n// const validate = (formValues) => {\n//   // looks for props within errors obj that has same name as the form props\n//   const errors = {};\n//   if (!formValues.title) {\n//     errors.title = \"You must enter a title\";\n//   }\n//   if (!formValues.description) {\n//     errors.description = \"You must enter a description\";\n//   }\n//   return errors;\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"StreamForm\");","map":{"version":3,"sources":["C:/Users/nicke/OneDrive/Stuff/Documents/streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","props","renderError","error","touched","renderInput","input","label","meta","className","onSubmit","formValues","handleSubmit","validate","errors","title","description","form"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAMC,WAAW,GAAG,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,KAAwB;AAC1C,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AACF,GARD,CAD4B,CAW5B;;;AACAE,EAAAA,WAAW,GAAG,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,GAAD,KAA4B;AACxC;AACA,UAAMC,SAAS,GAAI,SAAQD,IAAI,CAACL,KAAL,IAAcK,IAAI,CAACJ,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA,wBACE;AAAK,MAAA,SAAS,EAAEK,SAAhB;AAAA,8BACE;AAAA,kBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,sBAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGJ,WAAW,CAACM,IAAD,CAHd;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GAVD;;AAYAE,EAAAA,QAAQ,GAAIC,UAAD,IAAgB;AACzBV,IAAAA,KAAK,CAACS,QAAN,CAAeC,UAAf;AACD,GAFD;;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAEV,KAAK,CAACW,YAAN,CAAmBF,QAAnB,CAAhB;AAA8C,IAAA,SAAS,EAAC,eAAxD;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEL,WAA/B;AAA4C,MAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAEA,WAFb;AAGE,MAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,QAAMQ,QAAQ,GAAIF,UAAD,IAAgB;AAC/B;AACA,UAAMG,MAAM,GAAG,EAAf;;AAEA,QAAI,CAACH,UAAU,CAACI,KAAhB,EAAuB;AACrBD,MAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AAED,QAAI,CAACJ,UAAU,CAACK,WAAhB,EAA6B;AAC3BF,MAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AAED,WAAOF,MAAP;AACD,GAbD;AAcD,CAtDD;;KAAMd,U;AAwDN,eAAeD,SAAS,CAAC;AACvBkB,EAAAA,IAAI,EAAE,YADiB;AAEvBJ,EAAAA;AAFuB,CAAD,CAAT,CAGZb,UAHY,CAAf,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nconst StreamForm = (props) => {\n  const renderError = ({ error, touched }) => {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  };\n\n  //   // taking values from formProps, automatically populated by reduxForm\n  renderInput = ({ input, label, meta }) => {\n    // adds all the props of formProps as props of input element\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\" />\n        {renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = (formValues) => {\n    props.onSubmit(formValues);\n  };\n\n  return (\n    <form onSubmit={props.handleSubmit(onSubmit)} className=\"ui form error\">\n      <Field name=\"title\" component={renderInput} label=\"Enter title\" />\n      <Field\n        name=\"description\"\n        component={renderInput}\n        label=\"Enter description\"\n      />\n      <button className=\"ui button primary\">Submit</button>\n    </form>\n  );\n\n  const validate = (formValues) => {\n    // looks for props within errors obj that has same name as the form props\n    const errors = {};\n\n    if (!formValues.title) {\n      errors.title = \"You must enter a title\";\n    }\n\n    if (!formValues.description) {\n      errors.description = \"You must enter a description\";\n    }\n\n    return errors;\n  };\n};\n\nexport default reduxForm({\n  form: \"streamForm\",\n  validate,\n})(StreamForm);\n// class StreamForm extends React.Component {\n\n//   renderError({ error, touched }) {\n//     if (touched && error) {\n//       return (\n//         <div className=\"ui error message\">\n//           <div className=\"header\">{error}</div>\n//         </div>\n//       );\n//     }\n//   }\n\n//   // taking values from formProps, automatically populated by reduxForm\n//   renderInput = ({ input, label, meta }) => {\n//     // adds all the props of formProps as props of input element\n//     const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n//     return (\n//       <div className={className}>\n//         <label>{label}</label>\n//         <input {...input} autoComplete=\"off\" />\n//         {this.renderError(meta)}\n//       </div>\n//     );\n//   };\n\n//   onSubmit = (formValues) => {\n//     this.props.onSubmit(formValues);\n//   }\n\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//         <Field name=\"title\" component={this.renderInput} label=\"Enter title\" />\n//         <Field\n//           name=\"description\"\n//           component={this.renderInput}\n//           label=\"Enter description\"\n//         />\n//         <button className=\"ui button primary\">Submit</button>\n//       </form>\n//     );\n//   }\n// }\n\n// const validate = (formValues) => {\n//   // looks for props within errors obj that has same name as the form props\n//   const errors = {};\n\n//   if (!formValues.title) {\n//     errors.title = \"You must enter a title\";\n//   }\n\n//   if (!formValues.description) {\n//     errors.description = \"You must enter a description\";\n//   }\n\n//   return errors;\n// };\n"]},"metadata":{},"sourceType":"module"}