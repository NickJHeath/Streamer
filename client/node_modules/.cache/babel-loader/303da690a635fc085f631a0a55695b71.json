{"ast":null,"code":"import _ from \"lodash\";\nimport React from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\"; // class StreamEdit extends React.Component {\n//   componentDidMount() {\n//     this.props.fetchStream(this.props.match.params.id);\n//   }\n//   onSubmit = (formValues) => {\n//     this.props.editStream(this.props.match.params.id, formValues);\n//   };\n//   render() {\n//     if (!this.props.stream) {\n//       return <div>Loading...</div>;\n//     }\n//     return (\n//       <div>\n//         <h3>Edit a Stream</h3>\n//         <StreamForm\n//           initialValues={_.pick(this.props.stream, 'title', 'description')}\n//           onSubmit={this.onSubmit}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// const mapStateToProps = (state, ownProps) => {\n//   return { stream: state.streams[ownProps.match.params.id] };\n// };\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["C:/Users/nicke/OneDrive/Stuff/Documents/streams/client/src/components/streams/StreamEdit.js"],"names":["_","React","connect","useSelector","fetchStream","editStream","StreamForm","mapStateToProps","StreamEdit"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,eAAeJ,OAAO,CAACK,eAAD,EAAkB;AAAEH,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAlB,CAAP,CACbG,UADa,CAAf","sourcesContent":["import _ from \"lodash\";\nimport React from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\n\n// class StreamEdit extends React.Component {\n//   componentDidMount() {\n//     this.props.fetchStream(this.props.match.params.id);\n//   }\n\n//   onSubmit = (formValues) => {\n//     this.props.editStream(this.props.match.params.id, formValues);\n//   };\n\n//   render() {\n//     if (!this.props.stream) {\n//       return <div>Loading...</div>;\n//     }\n//     return (\n//       <div>\n//         <h3>Edit a Stream</h3>\n//         <StreamForm\n//           initialValues={_.pick(this.props.stream, 'title', 'description')}\n//           onSubmit={this.onSubmit}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state, ownProps) => {\n//   return { stream: state.streams[ownProps.match.params.id] };\n// };\n\nexport default connect(mapStateToProps, { fetchStream, editStream })(\n  StreamEdit\n);\n"]},"metadata":{},"sourceType":"module"}