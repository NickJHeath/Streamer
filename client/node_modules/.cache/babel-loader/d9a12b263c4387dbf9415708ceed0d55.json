{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicke\\\\OneDrive\\\\Stuff\\\\Documents\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport flv from \"flv.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nconst StreamShow = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const id = props.match.params.id;\n  const streams = useSelector(state => state.streams[id]);\n  const videoRef = useRef();\n  const player = useRef(); // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n  // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n\n  useEffect(() => {\n    dispatch(fetchStream(id));\n    buildPlayer();\n    return () => {\n      player.destroy;\n    };\n  }, [dispatch]);\n\n  const buildPlayer = () => {\n    if (player || !stream) {\n      return;\n    }\n\n    player.current = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    player.current.attachMediaElement(this.videoRef.current);\n    player.current.load();\n  };\n\n  if (!stream) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      style: {\n        width: \"100%\"\n      },\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: this.props.stream.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: this.props.stream.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StreamShow, \"LvW4G+PSh7soAcskOQYEh8RRGHg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = StreamShow;\nexport default StreamShow; // class StreamShow extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.videoRef = React.createRef();\n//   }\n//   componentDidMount() {\n//     this.props.fetchStream(this.props.match.params.id);\n//      this.buildPlayer();\n//   }\n//   componentWillUnmount() {\n//     this.player.destroy();\n//   }\n//   componentDidUpdate() {\n//     this.buildPlayer();\n//   }\n//   buildPlayer() {\n//     if (this.player || !this.props.stream) {\n//       return;\n//     }\n//     this.player = flv.createPlayer({\n//       type: \"flv\",\n//       url: `http://localhost:8000/live/${this.props.match.params.id}.flv`,\n//     });\n//     this.player.attachMediaElement(this.videoRef.current);\n//     this.player.load();\n//   }\n//   render() {\n//     if (!this.props.stream) return <div>Loading...</div>;\n//     return (\n//       <div>\n//         <video ref={this.videoRef} style={{ width: \"100%\" }} controls={true} />\n//         <h1>{this.props.stream.title}</h1>\n//         <h5>{this.props.stream.description}</h5>\n//       </div>\n//     );\n//   }\n// }\n// const mapStateToProps = (state, ownProps) => {\n//   return { stream: state.streams[ownProps.match.params.id] };\n// };\n// export default connect(mapStateToProps, { fetchStream })(StreamShow);\n\nvar _c;\n\n$RefreshReg$(_c, \"StreamShow\");","map":{"version":3,"sources":["C:/Users/nicke/OneDrive/Stuff/Documents/streams/client/src/components/streams/StreamShow.js"],"names":["React","useEffect","flv","useSelector","useDispatch","fetchStream","StreamShow","props","dispatch","id","match","params","streams","state","videoRef","useRef","player","buildPlayer","destroy","stream","current","createPlayer","type","url","attachMediaElement","load","width","title","description"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAMK,EAAE,GAAGF,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B;AACA,QAAMG,OAAO,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACD,OAAN,CAAcH,EAAd,CAAZ,CAA3B;AACA,QAAMK,QAAQ,GAAGC,MAAM,EAAvB;AACA,QAAMC,MAAM,GAAGD,MAAM,EAArB,CAL4B,CAO5B;AACA;AACA;AAEA;AACA;AACA;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACH,WAAW,CAACI,EAAD,CAAZ,CAAR;AACAQ,IAAAA,WAAW;AACX,WAAO,MAAM;AACXD,MAAAA,MAAM,CAACE,OAAP;AACD,KAFD;AAGD,GANQ,EAMN,CAACV,QAAD,CANM,CAAT;;AAQA,QAAMS,WAAW,GAAG,MAAM;AACxB,QAAID,MAAM,IAAI,CAACG,MAAf,EAAuB;AACrB;AACD;;AACDH,IAAAA,MAAM,CAACI,OAAP,GAAiBlB,GAAG,CAACmB,YAAJ,CAAiB;AAChCC,MAAAA,IAAI,EAAE,KAD0B;AAEhCC,MAAAA,GAAG,EAAG,8BAA6Bd,EAAG;AAFN,KAAjB,CAAjB;AAIAO,IAAAA,MAAM,CAACI,OAAP,CAAeI,kBAAf,CAAkC,KAAKV,QAAL,CAAcM,OAAhD;AACAJ,IAAAA,MAAM,CAACI,OAAP,CAAeK,IAAf;AACD,GAVD;;AAYA,MAAI,CAACN,MAAL,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,sBACE;AAAA,4BACE;AAAO,MAAA,GAAG,EAAEL,QAAZ;AAAsB,MAAA,KAAK,EAAE;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAA7B;AAAgD,MAAA,QAAQ,EAAE;AAA1D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAK,KAAKnB,KAAL,CAAWY,MAAX,CAAkBQ;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAK,KAAKpB,KAAL,CAAWY,MAAX,CAAkBS;AAAvB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA1CD;;GAAMtB,U;UACaF,W,EAEDD,W;;;KAHZG,U;AA4CN,eAAeA,UAAf,C,CAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect } from \"react\";\nimport flv from \"flv.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nconst StreamShow = (props) => {\n  const dispatch = useDispatch();\n  const id = props.match.params.id;\n  const streams = useSelector((state) => state.streams[id]);\n  const videoRef = useRef();\n  const player = useRef();\n\n  // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n\n  // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n  useEffect(() => {\n    dispatch(fetchStream(id));\n    buildPlayer();\n    return () => {\n      player.destroy;\n    };\n  }, [dispatch]);\n\n  const buildPlayer = () => {\n    if (player || !stream) {\n      return;\n    }\n    player.current = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`,\n    });\n    player.current.attachMediaElement(this.videoRef.current);\n    player.current.load();\n  };\n\n  if (!stream) return <div>Loading...</div>;\n  return (\n    <div>\n      <video ref={videoRef} style={{ width: \"100%\" }} controls={true} />\n      <h1>{this.props.stream.title}</h1>\n      <h5>{this.props.stream.description}</h5>\n    </div>\n  );\n};\n\nexport default StreamShow;\n\n// class StreamShow extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.videoRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.props.fetchStream(this.props.match.params.id);\n//      this.buildPlayer();\n//   }\n\n//   componentWillUnmount() {\n//     this.player.destroy();\n//   }\n\n//   componentDidUpdate() {\n//     this.buildPlayer();\n//   }\n\n//   buildPlayer() {\n//     if (this.player || !this.props.stream) {\n//       return;\n//     }\n//     this.player = flv.createPlayer({\n//       type: \"flv\",\n//       url: `http://localhost:8000/live/${this.props.match.params.id}.flv`,\n//     });\n//     this.player.attachMediaElement(this.videoRef.current);\n//     this.player.load();\n//   }\n\n//   render() {\n//     if (!this.props.stream) return <div>Loading...</div>;\n//     return (\n//       <div>\n//         <video ref={this.videoRef} style={{ width: \"100%\" }} controls={true} />\n//         <h1>{this.props.stream.title}</h1>\n//         <h5>{this.props.stream.description}</h5>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state, ownProps) => {\n//   return { stream: state.streams[ownProps.match.params.id] };\n// };\n\n// export default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}