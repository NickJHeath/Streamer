{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport flv from \"flv.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nconst StreamShow = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const id = props.match.params.id;\n  const streams = useSelector(state => state.streams[id]);\n  const videoRef = useRef(); // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n  // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n};\n\n_s(StreamShow, \"UWdAt7lEJH0taYqHumcLpbS7LB8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = StreamShow;\nexport default StreamShow; // class StreamShow extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.videoRef = React.createRef();\n//   }\n//   componentDidMount() {\n//     this.props.fetchStream(this.props.match.params.id);\n//      this.buildPlayer();\n//   }\n//   componentWillUnmount() {\n//     this.player.destroy();\n//   }\n//   componentDidUpdate() {\n//     this.buildPlayer();\n//   }\n//   buildPlayer() {\n//     if (this.player || !this.props.stream) {\n//       return;\n//     }\n//     this.player = flv.createPlayer({\n//       type: \"flv\",\n//       url: `http://localhost:8000/live/${this.props.match.params.id}.flv`,\n//     });\n//     this.player.attachMediaElement(this.videoRef.current);\n//     this.player.load();\n//   }\n//   render() {\n//     if (!this.props.stream) return <div>Loading...</div>;\n//     return (\n//       <div>\n//         <video ref={this.videoRef} style={{ width: \"100%\" }} controls={true} />\n//         <h1>{this.props.stream.title}</h1>\n//         <h5>{this.props.stream.description}</h5>\n//       </div>\n//     );\n//   }\n// }\n// const mapStateToProps = (state, ownProps) => {\n//   return { stream: state.streams[ownProps.match.params.id] };\n// };\n// export default connect(mapStateToProps, { fetchStream })(StreamShow);\n\nvar _c;\n\n$RefreshReg$(_c, \"StreamShow\");","map":{"version":3,"sources":["C:/Users/nicke/OneDrive/Stuff/Documents/streams/client/src/components/streams/StreamShow.js"],"names":["React","useEffect","flv","useSelector","useDispatch","fetchStream","StreamShow","props","dispatch","id","match","params","streams","state","videoRef","useRef"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAMK,EAAE,GAAGF,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B;AACA,QAAMG,OAAO,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACD,OAAN,CAAcH,EAAd,CAAZ,CAA3B;AACA,QAAMK,QAAQ,GAAGC,MAAM,EAAvB,CAJ4B,CAM5B;AACA;AACA;AAEA;AACA;AACA;AACD,CAbD;;GAAMT,U;UACaF,W,EAEDD,W;;;KAHZG,U;AAeN,eAAeA,UAAf,C,CAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect } from \"react\";\nimport flv from \"flv.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nconst StreamShow = (props) => {\n  const dispatch = useDispatch();\n  const id = props.match.params.id;\n  const streams = useSelector((state) => state.streams[id]);\n  const videoRef = useRef();\n\n  // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n\n  // const mapStateToProps = (state, ownProps) => {\n  //   return { stream: state.streams[ownProps.match.params.id] };\n  // };\n};\n\nexport default StreamShow;\n\n// class StreamShow extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.videoRef = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     this.props.fetchStream(this.props.match.params.id);\n//      this.buildPlayer();\n//   }\n\n//   componentWillUnmount() {\n//     this.player.destroy();\n//   }\n\n//   componentDidUpdate() {\n//     this.buildPlayer();\n//   }\n\n//   buildPlayer() {\n//     if (this.player || !this.props.stream) {\n//       return;\n//     }\n//     this.player = flv.createPlayer({\n//       type: \"flv\",\n//       url: `http://localhost:8000/live/${this.props.match.params.id}.flv`,\n//     });\n//     this.player.attachMediaElement(this.videoRef.current);\n//     this.player.load();\n//   }\n\n//   render() {\n//     if (!this.props.stream) return <div>Loading...</div>;\n//     return (\n//       <div>\n//         <video ref={this.videoRef} style={{ width: \"100%\" }} controls={true} />\n//         <h1>{this.props.stream.title}</h1>\n//         <h5>{this.props.stream.description}</h5>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state, ownProps) => {\n//   return { stream: state.streams[ownProps.match.params.id] };\n// };\n\n// export default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}