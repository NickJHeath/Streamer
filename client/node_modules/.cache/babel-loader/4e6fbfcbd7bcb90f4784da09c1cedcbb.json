{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicke\\\\OneDrive\\\\Stuff\\\\Documents\\\\streams\\\\client\\\\src\\\\components\\\\GoogleAuth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { signIn, signOut } from \"../actions\";\n\nconst GoogleAuth = () => {\n  _s();\n\n  let auth = useRef(null);\n  const dispatch = useDispatch();\n  const isSignedIn = useSelector(state => state.auth.isSignedIn);\n  const userId = useSelector(state => state.auth.isSignedIn);\n\n  const renderAuthButton = () => {\n    if (isSignedIn === null) {\n      return null;\n    } else if (isSignedIn) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onSignOutClick,\n        className: \"ui red google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), \"Sign out\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onSignInClick,\n        className: \"ui red google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), \"Sign in with Google\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const onAuthChange = isSignedIn => {\n    if (isSignedIn) {\n      dispatch(signIn(auth.current.currentUser.get().getId()));\n    } else {\n      dispatch(signOut());\n    }\n  };\n\n  const onSignInClick = () => {\n    auth.current.signIn();\n  };\n\n  const onSignOutClick = () => {\n    auth.current.signOut();\n  };\n\n  useEffect(() => {\n    window.gapi.load(\"client:auth2\", () => {\n      window.gapi.client.init({\n        client_id: \"490235815942-2trrn4n7tkkkf3ip6rn3257ggn2staq6.apps.googleusercontent.com\",\n        scope: \"email\"\n      }).then(() => {\n        auth.current = window.gapi.auth2.getAuthInstance();\n        console.log(auth.current);\n        onAuthChange(auth.current.isSignedIn.get());\n        auth.current.isSignedIn.listen(onAuthChange);\n      });\n    });\n  }, [onAuthChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Text\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n}; // class GoogleAuth extends React.Component {\n//   componentDidMount() {\n//     window.gapi.load(\"client:auth2\", () => {\n//       window.gapi.client\n//         .init({\n//           client_id:\n//             \"1086701695175-8kgimroibtpl2o7nk0ks5r9ih5cctgjh.apps.googleusercontent.com\",\n//           scope: \"email\",\n//         })\n//         .then(() => {\n//           this.auth = window.gapi.auth2.getAuthInstance();\n//           this.onAuthChange(this.auth.isSignedIn.get());\n//           this.auth.isSignedIn.listen(this.onAuthChange);\n//           //   this.auth.isSignedIn.listen(this.onAuthChange(this.auth.isSignedIn.get()));\n//         });\n//     });\n//   }\n//   onAuthChange = (isSignedIn) => {\n//     if (isSignedIn) {\n//       this.props.signIn(this.auth.currentUser.get().getId());\n//     } else {\n//       this.props.signOut();\n//     }\n//   };\n//   onSignInClick = () => {\n//     this.auth.signIn();\n//   };\n//   onSignOutClick = () => {\n//     this.auth.signOut();\n//   };\n//   renderAuthButton() {\n//     if (this.props.isSignedIn === null) {\n//       return null;\n//     } else if (this.props.isSignedIn) {\n//       return (\n//         <button onClick={this.onSignOutClick} className=\"ui red google button\">\n//           <i className=\"google icon\"> </i>Sign out\n//         </button>\n//       );\n//     } else {\n//       return (\n//         <button onClick={this.onSignInClick} className=\"ui red google button\">\n//           <i className=\"google icon\"> </i>Sign in with Google\n//         </button>\n//       );\n//     }\n//   }\n//   render() {\n//     return <div>{this.renderAuthButton()}</div>;\n//   }\n// }\n// const mapStateToProps = (state) => {\n//   return { isSignedIn: state.auth.isSignedIn };\n// };\n// export default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\n\n\n_s(GoogleAuth, \"44ht/FLGBFI5MnqYnK703TS6FuU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = GoogleAuth;\nexport default GoogleAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleAuth\");","map":{"version":3,"sources":["C:/Users/nicke/OneDrive/Stuff/Documents/streams/client/src/components/GoogleAuth.js"],"names":["React","useEffect","useState","useRef","useSelector","useDispatch","signIn","signOut","GoogleAuth","auth","dispatch","isSignedIn","state","userId","renderAuthButton","onSignOutClick","onSignInClick","onAuthChange","current","currentUser","get","getId","window","gapi","load","client","init","client_id","scope","then","auth2","getAuthInstance","console","log","listen"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { signIn, signOut } from \"../actions\";\n\nconst GoogleAuth = () => {\n  let auth = useRef(null);\n  const dispatch = useDispatch();\n  const isSignedIn = useSelector((state) => state.auth.isSignedIn);\n  const userId = useSelector((state) => state.auth.isSignedIn);\n\n  const renderAuthButton = () => {\n    if (isSignedIn === null) {\n      return null;\n    } else if (isSignedIn) {\n      return (\n        <button onClick={onSignOutClick} className=\"ui red google button\">\n          <i className=\"google icon\"> </i>Sign out\n        </button>\n      );\n    } else {\n      return (\n        <button onClick={this.onSignInClick} className=\"ui red google button\">\n          <i className=\"google icon\"> </i>Sign in with Google\n        </button>\n      );\n    }\n  };\n\n  const onAuthChange = (isSignedIn) => {\n    if (isSignedIn) {\n      dispatch(signIn(auth.current.currentUser.get().getId()));\n    } else {\n      dispatch(signOut());\n    }\n  };\n\n  const onSignInClick = () => {\n    auth.current.signIn();\n  };\n\n  const onSignOutClick = () => {\n    auth.current.signOut();\n  };\n\n  useEffect(() => {\n    window.gapi.load(\"client:auth2\", () => {\n      window.gapi.client\n        .init({\n          client_id:\n            \"490235815942-2trrn4n7tkkkf3ip6rn3257ggn2staq6.apps.googleusercontent.com\",\n          scope: \"email\",\n        })\n        .then(() => {\n          auth.current = window.gapi.auth2.getAuthInstance();\n          console.log(auth.current);\n          onAuthChange(auth.current.isSignedIn.get());\n          auth.current.isSignedIn.listen(onAuthChange);\n        });\n    });\n  }, [onAuthChange]);\n\n  return <div>Text</div>;\n};\n// class GoogleAuth extends React.Component {\n//   componentDidMount() {\n//     window.gapi.load(\"client:auth2\", () => {\n//       window.gapi.client\n//         .init({\n//           client_id:\n//             \"1086701695175-8kgimroibtpl2o7nk0ks5r9ih5cctgjh.apps.googleusercontent.com\",\n//           scope: \"email\",\n//         })\n//         .then(() => {\n//           this.auth = window.gapi.auth2.getAuthInstance();\n//           this.onAuthChange(this.auth.isSignedIn.get());\n//           this.auth.isSignedIn.listen(this.onAuthChange);\n//           //   this.auth.isSignedIn.listen(this.onAuthChange(this.auth.isSignedIn.get()));\n//         });\n//     });\n//   }\n\n//   onAuthChange = (isSignedIn) => {\n//     if (isSignedIn) {\n//       this.props.signIn(this.auth.currentUser.get().getId());\n//     } else {\n//       this.props.signOut();\n//     }\n//   };\n\n//   onSignInClick = () => {\n//     this.auth.signIn();\n//   };\n\n//   onSignOutClick = () => {\n//     this.auth.signOut();\n//   };\n\n//   renderAuthButton() {\n//     if (this.props.isSignedIn === null) {\n//       return null;\n//     } else if (this.props.isSignedIn) {\n//       return (\n//         <button onClick={this.onSignOutClick} className=\"ui red google button\">\n//           <i className=\"google icon\"> </i>Sign out\n//         </button>\n//       );\n//     } else {\n//       return (\n//         <button onClick={this.onSignInClick} className=\"ui red google button\">\n//           <i className=\"google icon\"> </i>Sign in with Google\n//         </button>\n//       );\n//     }\n//   }\n\n//   render() {\n//     return <div>{this.renderAuthButton()}</div>;\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return { isSignedIn: state.auth.isSignedIn };\n// };\n\n// export default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\n\nexport default GoogleAuth;\n"]},"metadata":{},"sourceType":"module"}